<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Jekyll Bootstrap</title>
 <link href="http://username.github.io/" rel="self"/>
 <link href="http://username.github.io"/>
 <updated>2015-02-12T09:56:02+08:00</updated>
 <id>http://username.github.io</id>
 <author>
   <name>Name Lastname</name>
   <email>blah@email.test</email>
 </author>

 
 <entry>
   <title>软件开发之DRY</title>
   <link href="http://username.github.io/2015/02/12/dry"/>
   <updated>2015-02-12T00:00:00+08:00</updated>
   <id>http://username.github.io/2015/02/12/dry</id>
   <content type="html">
&lt;h4 id=&quot;dry-dont-repeat-it-yourself&quot;&gt;DRY (Don’t Repeat it Yourself)&lt;/h4&gt;
&lt;p&gt;DRY, 软件开发原则经典之一。&lt;/p&gt;

&lt;p&gt;它建议我们能不造轮子就不要造轮子。因为造轮子的负面影响太多:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;最直接的是造轮子时间成本的付出. &lt;/li&gt;
  &lt;li&gt;造轮子的过程中我们会引入很多的坑，填空是另外一个巨大的成本.&lt;/li&gt;
  &lt;li&gt;开始造轮子之前还是建议你想清楚，轮子不是你想造就能造得好的，设计能力，专业知识和经验都直接影响你轮子的好坏。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;今天我就想说一说我们日常遇到的DRY问题。&lt;/p&gt;

&lt;h4 id=&quot;dry&quot;&gt;DRY平台之过&lt;/h4&gt;
&lt;p&gt;在iOS开发中最经常遇到的事情是很多很简单的功能系统没有或者不让做，于是乎造轮子成了这个平台最常见的现象。&lt;/p&gt;

&lt;p&gt;很多简单的功能你在github上一搜能搜出一大堆开源代码，实现大同小异，坑大坑小各不相同。这不能怪开原开发者，这是平台之过，苹果之过。苹果的SDK里面到处可见粗制滥造的设计，设计中到处会遇到大量的假设和一些magic number式的参数，不看文档极易踩坑里去。偏偏它文档简单，样例代码少，可检索性差,这也是iOS开发效率难上来的原因之一。&lt;/p&gt;

&lt;p&gt;iOS api设计上也不优雅实用，很多时候大家只能另外封装一层来加速开发，被逼着造轮子。&lt;/p&gt;

&lt;p&gt;这种情况下，还是建议大家开始造轮子之前尽量先去github搜一搜，找些现成的轮子用用，只要不是太烂，怎么着也比自己造来得省事。并且，大部分开源作者还是比较看重自己的名誉的，那些流行的开源库代码设计都是相当漂亮的。&lt;/p&gt;

&lt;h4 id=&quot;dry-1&quot;&gt;DRY开发者之过&lt;/h4&gt;
&lt;p&gt;因为经验上的缺乏或者对整个平台的理解不够透彻，有些开发者会抛开一些现有的解决方案不用而去自己去造一遍轮子。对于这种现象，只能通过想办法招更优质的开发者，或者加强培训来尽量避免其危害了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>怎样共享iPhone的屏幕以及录制screenshot</title>
   <link href="http://username.github.io/2015/02/05/howtoshareiphonescreen"/>
   <updated>2015-02-05T00:00:00+08:00</updated>
   <id>http://username.github.io/2015/02/05/howtoshareiphonescreen</id>
   <content type="html">
&lt;p&gt;通过QuickPlayer把iPhone屏幕显示到Mac机器上，windows机器上也有QuickPlayer，但是能不能用没有验证过。&lt;/p&gt;

&lt;p&gt;具体步骤如下:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;iPhone通过USB连接Mac电脑  &lt;/li&gt;
  &lt;li&gt;打开QuickPlayer，点击File-&amp;gt;New Movie Recording.&lt;/li&gt;
  &lt;li&gt;在录制界面右下角有个圆圈按钮，点击然后摄像头选择你的iPhone.&lt;/li&gt;
  &lt;li&gt;把iPhone屏幕解锁，你应该可以看到iPhone的屏幕了。&lt;/li&gt;
  &lt;li&gt;实际上你可以开始录制预览视频了，做演示的时候非常有用。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;参考:
&lt;a href=&quot;http://www.waerfa.com/how-to-manage-pic-in-yosemite-and-ios-8&quot;&gt;如何利用 Yosemite + iOS 8.1更高效的管理图片&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>贫民窟的苹果开发环境</title>
   <link href="http://username.github.io/2015/02/05/fuckingappleide"/>
   <updated>2015-02-05T00:00:00+08:00</updated>
   <id>http://username.github.io/2015/02/05/fuckingappleide</id>
   <content type="html">
&lt;h4 id=&quot;section&quot;&gt;开篇&lt;/h4&gt;
&lt;p&gt;我们又一款伟大的移动产品马上要轰动世界了，项目暂时告一段落。在这心情愉悦的日子里，我想来喷一喷苹果的开发环境。&lt;/p&gt;

&lt;p&gt;从一脚踏入iOS开发开始，苹果的开发环境在我眼中一直就是一种亚原始生产环境。苹果开发环境的恶劣归结到底为下面两个方面:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;给苹果Mac开发软件的供应商少，第三方软件奇缺&lt;/li&gt;
  &lt;li&gt;苹果平台的技术积累不够，至少落后了某竞争对手10年&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-1&quot;&gt;第三方软件奇缺&lt;/h4&gt;
&lt;p&gt;这个没有什么好说的，明眼人都看得到。无论是办公还是开发，上手Mac以后第一件事情肯定是不知所措，满世界找能用的软件。&lt;/p&gt;

&lt;p&gt;不要跟我说Mac上面有office&lt;/p&gt;

&lt;p&gt;Mac上的office是因为合同限制下ms给开发出来的，不是苹果自己开发的，你会帮竞争对手把一款产品开发的非常完美么？&lt;/p&gt;

&lt;p&gt;我记得我上手Mac后的第一件事情是找一款免费好用的文本编辑器，苦苦搜寻了几天，嫩是毛没有搜寻到！不要跟我说现在Sublime, Textmate现在都可以免费用了，那是现在，回退几年你试试？不要跟我说你有钱，啥都掏钱买，作为消费者，便宜实用才是王道。&lt;/p&gt;

&lt;p&gt;Windows上面无论是办公软件还是日常应用，娱乐，游戏还是支付，各种硬件驱动，以前应有尽有，还有无数免费开源的优秀软件。&lt;/p&gt;

&lt;p&gt;到了Mac平台上，只能眼巴巴的望着windows用户用。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;苹果平台技术落后&lt;/h4&gt;
&lt;p&gt;肯定不少人看到上面第二条早就忍不住想喷了:xcode不牛逼吗？Instruments不牛逼吗？LLVM不牛逼吗？iOS不牛逼吗？&lt;/p&gt;

&lt;p&gt;别急，我来告诉你真像.&lt;/p&gt;

&lt;p&gt;首先，作为在iOS平台上生产了n年shit的过来人，我实话告诉你，iOS/Mac平台程序员生产效率奇低，这是平台的原因，不是人才的原因。本人体会如下:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;调试技术非常落后。xcode 6(2014)之前，xcode一直没有界面live preview，变量live preview像个玩具，基本上不能用。至今为止我没有找到好的iOS dump分析的方法。网络调试工具自家完全没有。&lt;/li&gt;
  &lt;li&gt;界面布局技术特立独行(低效)。最开始Autoresize的时候还能勉强接受，不牛逼，但是大部分情况下够用,不够用了就徒手写代码布局，后来搞了个autolayout，产量瞬间下去了，不好修改，不好调试，还不如autoresize来得简洁。多人协作编辑storyboard简直是灾难，merge那个痛苦谁用谁知道。难道苹果的技术人员不知道这世界上有CSS, WPF等先进的布局技术可以借鉴么？&lt;/li&gt;
  &lt;li&gt;有人夸苹果的开发文档好，我只能呵呵了。没见过好的文档的人说这话我表示理解。&lt;/li&gt;
  &lt;li&gt;网络上样例代码少，相关的技术文章也少。我做一个很简单的Mac上面图片居中显示加缩放的小功能，翻遍了苹果官方的样例代码，搜遍了baidu(shit,换了一个不能上google的环境，没办法),搜遍了github，问题至今未能很好地解决。就是一个小小的布局问题啊，哥！&lt;/li&gt;
  &lt;li&gt;架构落后。总有人会在你面前夸耀iOS的MVC架构多么简洁，多么专一。我只想说: Fuck Shit! 你有研究过MVC适用什么样的场景么？在轻量级的移动客户端界面开发场景里跟我吹MVC，some times too young too simple，too naive! &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;回到xcode, instruments, LLVM的讨论. &lt;/p&gt;

&lt;p&gt;如果你知道project builder, Interface Builder, 你肯定对Xcode崇拜不起来，如果你用了Xcode 6, 用过里面的view debugging，你肯定为它crash的频率抓狂过，它不应该叫xcode，应该叫xcrash。Instruments确实是一个了不起的工具，但是如果把DTrace拿走，它狗屎都不是。DTrace是哪家的？Sun开源出来的。LLVM，这是个值得称道的东西，确实！&lt;/p&gt;

&lt;p&gt;我曾经在网上听人说苹果是开源大户，真的是匪夷所思！你去&lt;a href=&quot;http://opensource.apple.com&quot;&gt;苹果官方开宇列表&lt;/a&gt;翻翻,看有几个项目你没有在linux世界里面见到过。它完全自家开源的那几个产品要么是早过时，n年不维护了，要不就是功能极其简单，二次开发难度极大，DSS就是一个例子。能拿出来吹嘘的估计也就剩下个LLVM了。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;平台斯德哥尔摩症&lt;/h4&gt;
&lt;p&gt;每次苹果推出个新的功能，总有人到处吹嘘。殊不知，很多苹果新推出的功能早在别的平台用烂了。&lt;/p&gt;

&lt;p&gt;如果有人说苹果怎么不提供者功能那功能(或技术)，又会有人站出来誓死捍卫:这是简单，极致！&lt;/p&gt;

&lt;p&gt;拉倒吧，我开发iOS这么多年，被逼造了无数的轮子，哪里感觉这是简单极致，这就是平台做不到，咱开发者/用户只能这样将就！&lt;/p&gt;

&lt;p&gt;哥不是要贬低苹果，只是说，看清它的缺陷和不足之前别随意夸奖它！别做个斯德哥尔摩症患者。&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;结尾&lt;/h4&gt;
&lt;p&gt;求求各位达人不要再随意夸苹果的技术了，还是多批评，多提意见，让这个平台更好点，对开发者更有好点！&lt;/p&gt;

&lt;p&gt;最后，会在Mac上配置环境的程序员才是最牛逼的程序员！竞争对手在windows发布第一个版本的时候我就搭建好Mac开发环境了，噢耶！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>多github账号切换</title>
   <link href="http://username.github.io/2015/01/29/github"/>
   <updated>2015-01-29T00:00:00+08:00</updated>
   <id>http://username.github.io/2015/01/29/github</id>
   <content type="html">
&lt;h4 id=&quot;git&quot;&gt;同一个git站点不同用户切换的方法&lt;/h4&gt;
&lt;p&gt;大部分情况下我们一个github账号可以通过加入不同的organization,fork-&amp;gt;pull request来完成大部分不同的任务，git会默认帮我们记住github.com的用户名和密码。&lt;/p&gt;

&lt;p&gt;万一，我有两个github账号，一个旧的一个新的账号，并且两个都要维护，怎么办？&lt;/p&gt;

&lt;p&gt;我在命令行试过干掉cache的命令:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git config credential.helper ‘cache –timeout=3’ #让用户名密码自动过期&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;还有下面的这个:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git credential-cache exit #让cache退出&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;没有效果。后来有折腾了很多种办法，搜了很多网页，没有找到结果。&lt;/p&gt;

&lt;p&gt;再后来，找到了一个土办法，一个账号用git cli来做，另外一个用sourcetree来管理。&lt;/p&gt;

&lt;p&gt;sourcetree自己有一套embedded git和独立的用户名密码管理机制，它会和系统git的用户名密码隔离开来，所以，你可以用sourcetree管理一个账号，用git cli隔离另外一个账号就可以了。&lt;/p&gt;

&lt;p&gt;另外，其实只需要在push的时候分别用sourcetree和git cli就可以了，其它操作你喜欢谁就用谁。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>坑爹的苹果CFBundleVersion</title>
   <link href="http://username.github.io/2015/01/29/cfbundleversion"/>
   <updated>2015-01-29T00:00:00+08:00</updated>
   <id>http://username.github.io/2015/01/29/cfbundleversion</id>
   <content type="html">
&lt;h4 id=&quot;cfbundleversion-&quot;&gt;坑爹的CFBundleVersion 错误&lt;/h4&gt;
&lt;p&gt;经常在发新版本的时候会受到”Invalid Binary”, CFBundleVersion出错,blabla,告诉你一大堆规则，然后让你去改CFBundleVersion,改了以后又这样，如此循环反复，直至人吐血奔溃！&lt;/p&gt;

&lt;h4 id=&quot;cfbundleversion&quot;&gt;啥是CFBundleVersion？&lt;/h4&gt;
&lt;p&gt;plist里面会有两个version:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一个是”Bundle version string, short”,也就是”General”里面的Verion,这个是给AppStore看的，上传的时候也是靠这个字符串来匹配你的App.这个与itunesconnect里面的一致就可以了，每次上传新build的时候这个字段不用改。如果是上传到新的version，这个字段要和新version的build version字段一样。&lt;/li&gt;
  &lt;li&gt;另外一个是”Bundle verion”, “General”里面显示为Build, itunesconnect里面检测出错的时候会识别为CFBundleVersion,也是本片要吐槽的对象。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果每次你上传新build的时候这个字段的值没有增加，xcode validate的时候会检测出来并报错，你按规则任意把某个section增加一定的值就可以了。比如1.0.150129可以增加为1.0.150130, 这样就可以上传build了。&lt;/p&gt;

&lt;h4 id=&quot;cfbundleversion-1&quot;&gt;解决CFBundleVersion的问题&lt;/h4&gt;
&lt;p&gt;问题来了，itunesconnect经常抽风啊，你xcode validate过了，上传了，它不一定让你过啊，这种bug，绝对是无证程序员的错啊！&lt;/p&gt;

&lt;p&gt;针对这种傻逼的bug，如果你有时间，可以慢慢尝试，找出它抽风的规律，反正它会不停的说你错了，重新改吧。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;吐槽哥对付这个坑有个简单的办法，每次增加第一个section就可以了!&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;eg， 前面上传了1.0.150129,那么你下一个build直接上2.0.150129. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不
要浪费时间去尝试什么”1.0.150130”,”1.1.150129”,”1.3.150130”了,相信我，不会坑你的。&lt;/p&gt;

&lt;p&gt;哥在这里吐过血，现在写这篇文章就是想让你们能从我身上踩过去，不谢！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="http://username.github.io/lessons/2011/12/29/jekyll-introduction"/>
   <updated>2011-12-29T00:00:00+08:00</updated>
   <id>http://username.github.io/lessons/2011/12/29/jekyll-introduction</id>
   <content type="html">
&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we’ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as “a simple, blog aware, static site generator”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-does-jekyll-do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-is-not-blogging-software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why-should-i-care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
  &lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
  &lt;li&gt;No internet connection required.&lt;/li&gt;
  &lt;li&gt;Ability to publish via git.&lt;/li&gt;
  &lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
  &lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
  &lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-jekyll-works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you’ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the-jekyll-application-base-format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;
  Stores configuration data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;
  This folder is for partial views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll-configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
(&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content-in-jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content “objects” get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts-and-pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working-with-posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post’s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy “set”.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy “lessons/beginner”. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won’t find “lessons” and “beginner” as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working-with-pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates-in-jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page’s or post’s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site’s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sub-templates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another “root” layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;
&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using-liquid-for-templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what-is-liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-have-to-use-liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid-is-not-programmer-friendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can’t do jackshit in liquid that hasn’t been allowed explicitly by the implementation.
What’s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll’s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;
My personal stance is to not invest time trying to hack liquid. It’s really unnecessary
&lt;em&gt;from a programmer’s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I’ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-parses-files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt;
  This is done with textile or markdown.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting-files-for-parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We’ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining-layouts-for-posts-and-templates-parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you’d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-generates-the-final-static-files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll’s job is to generate a static representation of your website.
The following is an outline of how that’s done:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt;
  Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt;
  Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
  big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
  At this stage your site is one big computed ruby object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;
  Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
  Once the post is parsed and liquified inside the the proper layout structure, the layout itself is “liquified”.
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
  hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt;
 Finally the liquid templates are “rendered”, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you’ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
  &lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at []()
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you’d like.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
